//*****************************************************************************
// note pop-up menu
//*****************************************************************************
#include "standard.h"
#include "rc.h"
#pragma hdrstop

#include "frame.h"
#include "gridutil.h"
#include "note.h"
#include "notemenu.h"
#include "noteset.h"
#include "sysstate.h"
#include "noteview.h"

//*****************************************************************************
// this is screwy, in that this static function creates a TNoteMenu instance,
// uses it, then deletes it.
//*****************************************************************************
void TNoteMenu::PopUp( PTWindowsObject aParent, PTNote aNoteP, int xPos, int yPos )
{
// the NoteMenu window is used purely as a target for the messages
// generated by the local menu. It is created, but never opened.
PTNoteMenu noteMenuP= new TNoteMenu( aParent, aNoteP );
GetApplicationObject()->MakeWindow( noteMenuP );

HMENU hMenuRes = LoadMenu( GetApplicationObject()->hInstance,
    MAKEINTRESOURCE( IDM_NOTE_POPUP ));

HMENU hMenu = GetSubMenu( hMenuRes, 0 );

// enable appropriate menu items
if( aNoteP->IsDone() )
    DeleteMenu( hMenu, IDM_POPDONE, MF_BYCOMMAND );
else
    DeleteMenu( hMenu, IDM_POPUNDONE, MF_BYCOMMAND );


POINT xy;
xy.x= xPos;
xy.y= yPos;
ClientToScreen( aParent->HWindow, &xy );

TGridUtil::OurTrackPopupMenu( hMenu, TPM_RIGHTBUTTON | TPM_LEFTALIGN,
    xy.x, xy.y, 0, noteMenuP->HWindow, NULL );

DestroyMenu( hMenuRes );

//The command msg has not been sent to the window, just posted to its queue.
//So we can't delete window yet.  Instead, post DESTROY msg so that it'll
// go away after processing the command msg from the menu (if there is one)
PostMessage( noteMenuP->HWindow, WM_DESTROY, 0, 0 );

// window object is destroyed by WM_DESTROY processing (I think)
// delete noteMenuP;
}

//*****************************************************************************

//*****************************************************************************
TNoteMenu::TNoteMenu( PTWindowsObject aParent, PTNote aNoteP ):
     TWindow( aParent, "" )
{
itsNoteP= aNoteP;
}


//*****************************************************************************

//*****************************************************************************
TNoteMenu::~TNoteMenu( void)
{
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::DoneCmd( RTMessage )
{
itsNoteP->SetDone( TRUE );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::UndoneCmd( RTMessage )
{
itsNoteP->SetDone( FALSE );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::CopyCmd( RTMessage )
{
OpenClipboard( HWindow );
EmptyClipboard();

//put note text into clipboard
// for other applications
int n= 1 + itsNoteP->GetText().Len();
HANDLE hText= GlobalAlloc( GMEM_SHARE, n );
char *p= GlobalLock( hText );
strcpy( p, itsNoteP->GetText().Addr() );
GlobalUnlock( hText );

SetClipboardData( CF_TEXT, hText );

//put note text id into clipboard
// for this application
HANDLE hId= GlobalAlloc( GMEM_SHARE, sizeof( int ) );
int *id= (int*) GlobalLock( hId );
*id = itsNoteP->GetNoteID();
GlobalUnlock( hId );

WORD format = RegisterClipboardFormat( "NoteID" );
SetClipboardData( format, hId );

CloseClipboard();
}


//*****************************************************************************

//*****************************************************************************
void TNoteMenu::DeleteCmd(RTMessage )
{
// parent of messagebox is parent of the notemenu window,
// not "this", so that activation works ok.  Needed cause of screwy hierarchy.

if( IDOK == TMessageBox::OkAndCancel( Parent,
    "Deleting this note will remove it from all views and folders!",
    "Confirm Note Deletion" ))
    {

    // this order is important: detach, notify, delete
    TSysState::pAllNotes->detach( *itsNoteP );

    Notify( kNoteChg, NOOBJECT );

    delete itsNoteP;

    itsNoteP= NULL;
    TSysState::bSystemDirty= TRUE;
    }
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::RedCmd(RTMessage)
{
itsNoteP->GetColor().Set( kRed );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::RedGrayCmd( RTMessage )
{
itsNoteP->GetColor().Set( kRedGray );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::GrayCmd( RTMessage )
{
itsNoteP->GetColor().Set( kGray );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::BlueGrayCmd( RTMessage )
{
itsNoteP->GetColor().Set( kBlueGray );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************

//*****************************************************************************
void TNoteMenu::BlueCmd( RTMessage )
{
itsNoteP->GetColor().Set( kBlue );
TSysState::bSystemDirty= TRUE;
}

//*****************************************************************************
//  ViewCmd
//
//  View the note in question
//*****************************************************************************
void TNoteMenu::ViewCmd( RTMessage )
{
GetApplication()->ExecDialog(
    new TNoteView( TPimFrame::pFrame, IDD_NOTE, itsNoteP ));
}

